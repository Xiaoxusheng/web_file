name: Go CI/CD Release

on:
  push:
    tags:
      - 'v*.*.*'  # 只在标签符合这个模式时触发
    branches:
      - master

jobs:
  example:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.ACCESS_TOKEN }}  # 使用 PAT token

  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22.7'  # 根据需要修改 Go 版本

      - name: Build for multiple platforms
        run: |
          platforms="linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64"
          version=${GITHUB_REF#refs/tags/}  # 提取版本号
          for platform in $platforms; do
            os_arch=$(echo $platform | tr / ' ' )
            GOOS=$(echo $os_arch | cut -d ' ' -f1)
            GOARCH=$(echo $os_arch | cut -d ' ' -f2)
            output_name="${GOOS}-${GOARCH}-web-${version}"  # 包名包含平台和版本号
            go build -o "${output_name}" -ldflags "-w -s" ./...
          done

      - name: Archive production artifact
        uses: actions/upload-artifact@v4
        with:
          name: web
          path: web-*  # 修改为匹配所有生成的文件

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: "web ${GITHUB_REF#refs/tags/}"
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./web-*
          asset_name: web-${{ github.ref }}-${{ runner.os }}-${{ github.sha }}
          asset_content_type: application/octet-stream
