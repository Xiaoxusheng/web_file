name: Go CI/CD Release

on:
  push:
    tags:
      - 'v*.*.*' # 只有当推送符合此模式的标签时触发工作流
    branches:
      - master

jobs:
  example:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.ACCESS_TOKEN }}  # 使用 PAT 令牌
  build-and-deploy:
    runs-on: ubuntu-latest
  # 使用 matrix 来支持多个操作系统和架构
  strategy:
    matrix:
      os: [ ubuntu-latest, macos-latest, windows-latest ]  # 支持多个操作系统
      go-version: [ '1.22.7' ]  # 你可以根据需要修改 Go 版本
      # 你还可以在这里指定不同的架构 (amd64, arm64 等)，如果需要支持更多架构的话

  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - name: Build
      run: |
        GOOS=${{ matrix.os == 'windows-latest' && 'windows' || (matrix.os == 'macos-latest' && 'darwin' || 'linux') }}
        GOARCH=amd64 go build -o web-${{ matrix.os }}-${{ matrix.go-version }} -ldflags "-w -s" ./...
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: amd64  # 你可以根据需求修改架构，支持 arm64 等

    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-${{ matrix.os }}
        path: web-${{ matrix.os }}-${{ matrix.go-version }}

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: web ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./web
        asset_name: web-${{ github.ref }}
        asset_content_type: application/octet-stream